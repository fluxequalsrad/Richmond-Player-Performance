library(tidyverse)
library(naniar)
library(shiny)
library(plotly)
# Player performance data from 1965 to 2024
player_stats <-read.csv("Player Stats 1965-2024.csv")
# List of player information since the club's inception
player_list <-read.csv("Player List.csv")
# View data dimensions
cat("Number of rows:", nrow(player_stats), "\n")
cat("Number of columns:", ncol(player_stats), "\n")
#Is there missing data?
cat("\n", "Amount of missing data per column:", "\n")
colSums(is.na(player_stats))
# drop columns
player_stats <- subset(player_stats, select = -c(HO, BR, CP, UP, CM, MI, BO, GA))
# rename X1. column
names(player_stats)[which(names(player_stats) == "X1.")] <- "1P"
# replace NA with 0
player_stats[is.na(player_stats)] <- 0
# drop players with less than 100 games
player_stats <- filter(player_stats, player_stats$GM >=100)
# create accuracy column
player_stats <- mutate(player_stats, ACC = GL / (GL + BH))
# move accuracy column next to GL column
player_stats <- relocate(player_stats, ACC, .after=GL)
# drop behinds column
player_stats <- select(player_stats, "Player", "GM", "KI", "MK", "HB", "DI", "GL", "ACC", "TK", "RB", "IF", "CL", "CG", "FF", "FA", "1P")
# create differential column
player_stats <- mutate(player_stats, FD = FF - FA)
player_stats <- relocate(player_stats, FD, .after=FA)
# create ratio column
player_stats <- mutate(player_stats, FR = FF / FA)
player_stats <- relocate(player_stats, FR, .after=FD)
# drop behinds column
player_stats <- select(player_stats, "Player", "GM", "KI", "MK", "HB", "DI", "GL", "ACC", "TK", "RB", "IF", "CL", "CG", "FD", "FR", "1P")
# create disposal efficiency column
player_stats <- mutate(player_stats, DE = (DI - CG)/DI*100)
player_stats <- relocate(player_stats, DE, .after=DI)
player_stats$DE[player_stats$CG == 0] <- 0
# drop disposals and clangers columns
player_stats <- select(player_stats, "Player", "GM", "KI", "MK", "HB", "DE", "GL", "ACC", "TK", "RB", "IF", "CL", "FD", "FR", "1P")
# create per game dataframe
player_stats_per_game <- player_stats
player_stats_per_game[,3:15] <- player_stats_per_game[, 3:15] / player_stats_per_game$GM
player_stats_per_game$FR <- player_stats_per_game$FR * player_stats_per_game$GM
#drop GM, DE, ACC, FD columns
player_stats_per_game <- select(player_stats_per_game, "Player", "KI", "MK", "HB", "GL", "TK", "RB", "IF", "CL", "FR", "1P")
#drop FR column from totals
player_stats_totals <- select(player_stats, "Player", "GM", "KI", "MK", "HB", "DE", "GL", "ACC", "TK", "RB", "IF", "CL", "FD", "1P")
# Extract core player stats into its own data set
core_ps_totals <- select(player_stats_totals, Player, GM, KI, MK, HB, GL, ACC, FD)
core_ps_per_game <- select(player_stats_per_game, Player, KI, MK, HB, GL, FR)
ggplot(core_ps_totals, aes(x = KI)) +
geom_density(fill = "skyblue", color = "black") +
labs(title = "Density Plot of Games Played", x = "Number of Games Played per Player", y = "Density")
ggplot(core_ps_totals, aes(x = GM)) +
geom_density(fill = "skyblue", color = "black") +
labs(title = "Density Plot of Games Played", x = "Number of Games Played per Player", y = "Density")
View(core_ps_per_game)
View(core_ps_totals)
ggplot(core_ps_totals, aes(x = MK)) +
geom_density(fill = "skyblue", color = "black") +
labs(title = "Density Plot of Games Played", x = "Number of Games Played per Player", y = "Density")
ggplot(core_ps_totals, aes(x = GM)) +
geom_density(fill = "skyblue", color = "black") +
labs(title = "Density Plot of Games Played", x = "Number of Games Played per Player", y = "Density")
library(tidyverse)
library(naniar)
library(shiny)
library(plotly)
# Player performance data from 1965 to 2024
player_stats <-read.csv("Player Stats 1965-2024.csv")
# List of player information since the club's inception
player_list <-read.csv("Player List.csv")
# View data dimensions
cat("Number of rows:", nrow(player_stats), "\n")
cat("Number of columns:", ncol(player_stats), "\n")
#Is there missing data?
cat("\n", "Amount of missing data per column:", "\n")
colSums(is.na(player_stats))
# drop columns
player_stats <- subset(player_stats, select = -c(HO, BR, CP, UP, CM, MI, BO, GA))
# rename X1. column
names(player_stats)[which(names(player_stats) == "X1.")] <- "1P"
# replace NA with 0
player_stats[is.na(player_stats)] <- 0
# drop players with less than 100 games
player_stats <- filter(player_stats, player_stats$GM >=100)
# create accuracy column
player_stats <- mutate(player_stats, ACC = GL / (GL + BH))
# move accuracy column next to GL column
player_stats <- relocate(player_stats, ACC, .after=GL)
# drop behinds column
player_stats <- select(player_stats, "Player", "GM", "KI", "MK", "HB", "DI", "GL", "ACC", "TK", "RB", "IF", "CL", "CG", "FF", "FA", "1P")
# create differential column
player_stats <- mutate(player_stats, FD = FF - FA)
player_stats <- relocate(player_stats, FD, .after=FA)
# create ratio column
player_stats <- mutate(player_stats, FR = FF / FA)
player_stats <- relocate(player_stats, FR, .after=FD)
# drop behinds column
player_stats <- select(player_stats, "Player", "GM", "KI", "MK", "HB", "DI", "GL", "ACC", "TK", "RB", "IF", "CL", "CG", "FD", "FR", "1P")
# create disposal efficiency column
player_stats <- mutate(player_stats, DE = (DI - CG)/DI*100)
player_stats <- relocate(player_stats, DE, .after=DI)
player_stats$DE[player_stats$CG == 0] <- 0
# drop disposals and clangers columns
player_stats <- select(player_stats, "Player", "GM", "KI", "MK", "HB", "DE", "GL", "ACC", "TK", "RB", "IF", "CL", "FD", "FR", "1P")
# create per game dataframe
player_stats_per_game <- player_stats
player_stats_per_game[,3:15] <- player_stats_per_game[, 3:15] / player_stats_per_game$GM
player_stats_per_game$FR <- player_stats_per_game$FR * player_stats_per_game$GM
#drop GM, DE, ACC, FD columns
player_stats_per_game <- select(player_stats_per_game, "Player", "KI", "MK", "HB", "GL", "TK", "RB", "IF", "CL", "FR", "1P")
#drop FR column from totals
player_stats_totals <- select(player_stats, "Player", "GM", "KI", "MK", "HB", "DE", "GL", "ACC", "TK", "RB", "IF", "CL", "FD", "1P")
# Extract core player stats into its own data set
core_ps_totals <- select(player_stats_totals, Player, GM, KI, MK, HB, GL, ACC, FD)
core_ps_per_game <- select(player_stats_per_game, Player, KI, MK, HB, GL, FR)
ggplot(core_ps_totals, aes(x = GM)) +
geom_density(fill = "skyblue", color = "black") +
labs(title = "Density Plot of Games Played", x = "Number of Games Played per Player", y = "Density")
corr(core_ps_totals)
cor(core_ps_totals)
cor(core_ps_totals[2:])
cor(core_ps_totals[, -1])
cor(core_ps_totals[, -1])
# View data dimensions
cat("Number of rows:", nrow(player_stats), "\n")
cat("Number of columns:", ncol(player_stats), "\n")
#Is there missing data?
cat("\n", "Amount of missing data per column:", "\n")
colSums(is.na(player_stats))
ggplot(core_ps_totals[, -1], aes(x = value)) +  # Exclude first column
geom_density(fill = "skyblue", color = "black") +
facet_grid(vars(variable), scales = "free") +
labs(title = "Density Plots for Player Statistics",
x = "Value",
y = "Density")
data_long <- pivot_longer(core_ps_totals, cols = -1, names_to = "variable", values_to = "value")
ggplot(data_long, aes(x = value)) +
geom_density(fill = "skyblue", color = "black") +
facet_grid(variable ~ ., scales = "free") +
labs(title = "Density Plots for Player Statistics",
x = "Value",
y = "Density")
data_long <- pivot_longer(core_ps_totals, cols = -1, names_to = "variable", values_to = "value")
ggplot(data_long, aes(x = value)) +
geom_density(fill = "skyblue", color = "black") +
facet_wrap(variable ~ ., scales = "free") +
labs(title = "Density Plots for Player Statistics",
x = "Value",
y = "Density")
